import pandas as pd
import numpy as np
from sentence_transformers import SentenceTransformer
from sklearn.metrics.pairwise import cosine_similarity
import os
import requests
from dotenv import load_dotenv

load_dotenv()
TMDB_ACCESS_TOKEN = os.getenv('TMDB_ACCESS_TOKEN')
if not TMDB_ACCESS_TOKEN:
    raise ValueError("TMDB_ACCESS_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")

print(f"TMDB_ACCESS_TOKEN: {TMDB_ACCESS_TOKEN[:10]}...") # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
TMDB_IMAGE_BASE_URL = "https://image.tmdb.org/t/p/w500"
# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
model = SentenceTransformer('all-MiniLM-L6-v2')

def load_or_create_embeddings():
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏
    embeddings_file = "movie_embeddings.npy"
    data_file = "movie_data.csv"
    
    if os.path.exists(embeddings_file) and os.path.exists(data_file):
        print("–ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...")
        embeddings = np.load(embeddings_file)
        df = pd.read_csv(data_file)
        df['embedding'] = list(embeddings)
    else:
        print("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...")
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        df = pd.read_csv("tmdb_5000_movies.csv")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω—É–∂–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
        df = df[['id', 'title', 'overview', 'genres', 'release_date']].dropna()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –¥–ª—è –≤—Å–µ—Ö –æ–ø–∏—Å–∞–Ω–∏–π —Ñ–∏–ª—å–º–æ–≤
        print("–°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ —Ñ–∏–ª—å–º–æ–≤...")
        embeddings = df['overview'].apply(lambda x: model.encode(x, show_progress_bar=False))
        df['embedding'] = embeddings
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∏ –¥–∞–Ω–Ω—ã—Ö
        np.save(embeddings_file, np.array(embeddings.tolist()))
        df.to_csv(data_file, index=False)
    
    return df

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
df = load_or_create_embeddings()

def recommend_movies(user_input, top_k=10):
    print("–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    user_embedding = model.encode(user_input)
    similarities = df['embedding'].apply(lambda x: cosine_similarity([user_embedding], [x])[0][0])
    df['similarity'] = similarities
    recommendations = df.sort_values('similarity', ascending=False).head(top_k)
    
    # –î–æ–±–∞–≤–ª—è–µ–º URL –ø–æ—Å—Ç–µ—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∏–ª—å–º–∞
    recommendations['poster_url'] = recommendations['id'].apply(get_movie_poster)
    
    return recommendations[['id', 'title', 'overview', 'genres', 'release_date', 'poster_url']]

def get_movie_poster(movie_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–µ—Ä–∞ —Ñ–∏–ª—å–º–∞ –∏–∑ TMDB –ø–æ ID"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ –ø–æ ID
        movie_url = f"https://api.themoviedb.org/3/movie/{movie_id}/images"
        headers = {
            "Authorization": f"Bearer {TMDB_ACCESS_TOKEN}",
            "accept": "application/json"
        }
        
        response = requests.get(movie_url, headers=headers)
        response.raise_for_status()
        movie_data = response.json()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –ø–æ—Å—Ç–µ—Ä—É –∏–∑ –º–∞—Å—Å–∏–≤–∞ posters
        if movie_data.get("posters") and len(movie_data["posters"]) > 0:
            poster_path = movie_data["posters"][0]["file_path"]
            return f"{TMDB_IMAGE_BASE_URL}{poster_path}"
            
        return "https://via.placeholder.com/500x750?text=No+Poster+Available"
        
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–µ—Ä–∞ –¥–ª—è —Ñ–∏–ª—å–º–∞ {movie_id}: {str(e)}")
        return "https://via.placeholder.com/500x750?text=Network+Error"
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–µ—Ä–∞ –¥–ª—è —Ñ–∏–ª—å–º–∞ {movie_id}: {str(e)}")
        return "https://via.placeholder.com/500x750?text=Error+Loading+Poster"

# –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥
if __name__ == "__main__":
    user_mood = "I want to watch a movie about a girl who is a detective"
    recommendations = recommend_movies(user_mood)
    print("\nüé¨ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã:")
    for i, row in recommendations.iterrows():
        print(f"\nüé• {row['title']}\n{row['overview']}")